{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Random Forest","version":"0.3.2","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"NAcXXqzHUiTp","colab_type":"text"},"cell_type":"markdown","source":["# ReadMe\n","\n","How to Run:\n","*  Run up until Data Importing (inclusive)\n","*  Run either Professional Encoding or Casual Encoding to perform 1-hot encoding for either dataset\n","*  Depending on selected Data, run the corresponding algorithm (e.g. vanilla casual)\n","\n","Error Handling:\n","*    In the case of an error, reset the runtime and run the code cells consecutively again.\n","\n","\n"]},{"metadata":{"id":"DVwPhAYKnkrl","colab_type":"text"},"cell_type":"markdown","source":["## Edit Program Behavior Here"]},{"metadata":{"id":"2Fp5uVuFkoGU","colab_type":"code","colab":{}},"cell_type":"code","source":["# EDIT PROGRAM HERE\n","path_to_pro_data = \"/content/gdrive/Team Drives/CIS 520/professional/\"  # pro data folder must be separated in train and test folders just like the zip file\n","path_to_casual_data = \"/content/gdrive/Team Drives/CIS 520/casual/\" # casual data folder must be separated in train and test folders just like the zip file\n","features_type = \"_Winrates_\" # possible toggles: _Winrates_ or _Vanilla_\n","enable_pca = True and (features_type != \"_Vanilla_\") # change the bool only, no need to run PCA for Vanilla\n","professional = False "],"execution_count":0,"outputs":[]},{"metadata":{"id":"AbdaYi9tJYay","colab_type":"text"},"cell_type":"markdown","source":["# Import Packages"]},{"metadata":{"id":"UeVbTjSqHJVU","colab_type":"code","outputId":"c999c1bd-f318-4d1b-90db-36e0b7aee621","executionInfo":{"status":"ok","timestamp":1556677110114,"user_tz":240,"elapsed":1184,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"cell_type":"code","source":["from sklearn import preprocessing\n","import matplotlib.pyplot as plt \n","import time\n","import pandas as pd\n","import random\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import confusion_matrix\n","import numpy as np\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import f1_score\n","from sklearn.decomposition import PCA\n","from sklearn.model_selection import learning_curve\n","from sklearn.model_selection import ShuffleSplit\n","from sklearn.model_selection import validation_curve\n","import pandas as pd\n","import numpy as np\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","from sklearn.metrics import classification_report\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":32,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"metadata":{"id":"SyFFtjTTHv0E","colab_type":"code","colab":{}},"cell_type":"code","source":["def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n","                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n","    plt.figure()\n","    plt.title(title)\n","    if ylim is not None:\n","        plt.ylim(*ylim)\n","    plt.xlabel(\"Training examples\")\n","    plt.ylabel(\"Score\")\n","    train_sizes, train_scores, test_scores = learning_curve(\n","        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n","    train_scores_mean = np.mean(train_scores, axis=1)\n","    train_scores_std = np.std(train_scores, axis=1)\n","    test_scores_mean = np.mean(test_scores, axis=1)\n","    test_scores_std = np.std(test_scores, axis=1)\n","    plt.grid()\n","\n","    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n","                     train_scores_mean + train_scores_std, alpha=0.1,\n","                     color=\"r\")\n","    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n","                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n","    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n","             label=\"Training score\")\n","    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n","             label=\"Cross-validation score\")\n","\n","    plt.legend(loc=\"best\")\n","    return plt\n","  \n","def plot_valid_curve(estimator, title, X, y, ylim=None, param_name=\"gamma\",\n","                      n_jobs=None, param_range = np.logspace(-6, -1, 5), y_lim=(0.0, 1.1), train_sizes=np.linspace(.1, 1.0, 5), cv=5):\n","  train_scores, test_scores = validation_curve(estimator, X, np.ravel(y), param_name=param_name, param_range=param_range,\n","      cv=cv, scoring=\"accuracy\", n_jobs=n_jobs)\n","\n","  train_scores_mean = np.mean(train_scores, axis=1)\n","  train_scores_std = np.std(train_scores, axis=1)\n","  test_scores_mean = np.mean(test_scores, axis=1)\n","  test_scores_std = np.std(test_scores, axis=1)\n","\n","\n","  plt.title(title)\n","  plt.xlabel(param_name)\n","  plt.ylabel(\"Score\")\n","  plt.ylim(*ylim)\n","  lw = 2\n","  plt.grid()\n","  plt.plot(param_range, train_scores_mean, label=\"Training score\",\n","               color=\"darkorange\", lw=lw)\n","  plt.fill_between(param_range, train_scores_mean - train_scores_std,\n","                   train_scores_mean + train_scores_std, alpha=0.2,\n","                   color=\"darkorange\", lw=lw)\n","  plt.plot(param_range, test_scores_mean, label=\"Cross-validation score\",\n","               color=\"navy\", lw=lw)\n","  plt.fill_between(param_range, test_scores_mean - test_scores_std,\n","                   test_scores_mean + test_scores_std, alpha=0.2,\n","                   color=\"navy\", lw=lw)\n","  plt.legend(loc=\"best\")\n","  return plt"],"execution_count":0,"outputs":[]},{"metadata":{"id":"r9E_yfMcg9Yt","colab_type":"text"},"cell_type":"markdown","source":["#Data Importing"]},{"metadata":{"id":"k7A2NA-ptPwz","colab_type":"code","colab":{}},"cell_type":"code","source":["# professional data import\n","X_pro_filename_train = path_to_pro_data + \"train/Professional_Features\" + features_type + \"Train.csv\"\n","y_pro_filename_train = path_to_pro_data + \"train/Professional_Labels_Train.csv\"\n","\n","X_train_p = pd.read_csv(X_pro_filename_train)\n","y_train_p = pd.read_csv(y_pro_filename_train)\n","\n","X_pro_filename_test = path_to_pro_data + \"test/Professional_Features\" + features_type + \"Test.csv\"\n","y_pro_filename_test = path_to_pro_data + \"test/Professional_Labels_Test.csv\"\n","\n","X_test_p = pd.read_csv(X_pro_filename_test)\n","y_test_p = pd.read_csv(y_pro_filename_test)\n","\n","# casual data import\n","X_ranked_filename_train = path_to_casual_data + \"train/Casual_Features\" + features_type + \"Train.csv\"\n","y_ranked_filename_train = path_to_casual_data + \"train/Casual_Labels_Train.csv\"\n","\n","X_train_r = pd.read_csv(X_ranked_filename_train)\n","y_train_r = pd.read_csv(y_ranked_filename_train)\n","\n","X_ranked_filename_test = path_to_casual_data + \"test/Casual_Features\" + features_type + \"Test.csv\"\n","y_ranked_filename_test = path_to_casual_data + \"test/Casual_Labels_Test.csv\"\n","\n","X_test_r = pd.read_csv(X_ranked_filename_test)\n","y_test_r = pd.read_csv(y_ranked_filename_test)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5P__D_Vvgtlt","colab_type":"text"},"cell_type":"markdown","source":["#Professional Encoding"]},{"metadata":{"id":"puAkSH2-DSMj","colab_type":"code","outputId":"3f2f4ce9-fd93-412b-a2ce-27d5da6efe96","executionInfo":{"status":"ok","timestamp":1556677152413,"user_tz":240,"elapsed":43406,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"cell_type":"code","source":["# merge test and train data\n","split_at = X_train_p.shape[0]\n","full_data = X_train_p.append(X_test_p)\n","\n","# convert to categorical variables\n","cat_vars = list(full_data)\n","\n","for var in cat_vars:\n","  if (\"player\" in var) or (\"winrate\" in var):\n","    continue\n","  else:\n","    full_data[var] = full_data[var].astype('category')\n","    \n","# perform 1-hot encoding on categorical data\n","for var in cat_vars:\n","  if (\"player\" in var) or (\"winrate\" in var):\n","    continue\n","  else:\n","    cat_list = pd.get_dummies(full_data[var], prefix = var) # makes every variable binary\n","    full_data = pd.concat([full_data, cat_list], axis=1)\n","\n","# drop data pre-1-hot encoding\n","full_data.drop(columns = ['blue_top', 'red_top', 'blue_jungle', 'red_jungle', 'blue_middle','red_middle', 'blue_adc', 'red_adc', 'blue_support', 'red_support'], inplace=True)\n","\n","# split into test and train according to original split\n","X_train_p_encoded = full_data[0:split_at]\n","X_test_p_encoded = full_data[split_at:full_data.shape[0]]\n","\n","# features & labels\n","X_train = X_train_p_encoded\n","y_train = y_train_p\n","X_test = X_test_p_encoded\n","y_test = y_test_p\n","\n","# feature size reduction with PCA\n","if enable_pca:\n","  components_requested = 1\n","  variance_threshold = 0.9\n","  while True:\n","    pca = PCA(n_components=components_requested)\n","    pca.fit(X_train)\n","    if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","      break\n","    else:\n","      components_requested +=1\n","  X_train = pca.transform(X_train)\n","  X_test = pca.transform(X_test)\n","  print(\"PCA Components Extracted:\", format(components_requested))"],"execution_count":35,"outputs":[{"output_type":"stream","text":["PCA Components Extracted: 154\n"],"name":"stdout"}]},{"metadata":{"id":"oROQfN_VhM_k","colab_type":"text"},"cell_type":"markdown","source":["#Casual Encoding"]},{"metadata":{"id":"kZKoVjOX3CZp","colab_type":"code","outputId":"8c411e49-24e4-459b-af4b-9b69fb807d0b","executionInfo":{"status":"ok","timestamp":1556677161122,"user_tz":240,"elapsed":52070,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"cell_type":"code","source":["# merge train and test data\n","split_at = X_train_r.shape[0]\n","full_data = X_train_r.append(X_test_r)\n","\n","# convert to categorical variables\n","cat_vars = list(full_data)\n","\n","for var in cat_vars:\n","  if (\"skill\" in var) or (\"winrate\" in var):\n","    continue\n","  else:\n","    full_data[var] = full_data[var].astype('category')\n","    \n","# perform 1-hot encoding for categorical features\n","for var in cat_vars:\n","  if (\"skill\" in var) or (\"winrate\" in var):\n","    continue\n","  else:\n","    cat_list = pd.get_dummies(full_data[var], prefix = var) # makes every variable binary\n","    full_data = pd.concat([full_data, cat_list], axis=1)\n","\n","\n","full_data.drop(columns = ['blue_top', 'red_top', 'blue_jungle', 'red_jungle', 'blue_middle','red_middle', 'blue_adc', 'red_adc', 'blue_support', 'red_support'], inplace=True)\n","\n","# unmerge train and test data\n","X_train_r_encoded = full_data[0:split_at]\n","X_test_r_encoded = full_data[split_at:full_data.shape[0]]\n","\n","# features & labels\n","X_train = X_train_r_encoded\n","y_train = y_train_r\n","X_test = X_test_r_encoded\n","y_test = y_test_r\n","\n","\n","# feature size reduction with PCA\n","if enable_pca:\n","  components_requested = 1\n","  variance_threshold = 0.9\n","  while True:\n","    pca = PCA(n_components=components_requested)\n","    pca.fit(X_train)\n","    if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","      break\n","    else:\n","      components_requested +=1\n","      \n","  X_train = pca.transform(X_train)\n","  X_test = pca.transform(X_test)\n","  print(\"PCA Components Extracted:\", format(components_requested))"],"execution_count":36,"outputs":[{"output_type":"stream","text":["PCA Components Extracted: 43\n"],"name":"stdout"}]},{"metadata":{"id":"Jw2IRgkeBbNZ","colab_type":"text"},"cell_type":"markdown","source":["#Parameter Tuning "]},{"metadata":{"id":"wyO5CqgnAWxp","colab_type":"code","colab":{}},"cell_type":"code","source":["if (not professional) and features_type == \"_Vanilla_\":\n","  # features & labels\n","  X_train = X_train_r_encoded\n","  y_train = y_train_r\n","  X_test = X_test_r_encoded\n","  y_test = y_test_r\n","\n","  # feature size reduction with PCA\n","  if enable_pca:\n","    components_requested = 1\n","    variance_threshold = 0.9\n","    while True:\n","      pca = PCA(n_components=components_requested)\n","      pca.fit(X_train)\n","      if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","        break\n","      else:\n","        components_requested +=1\n","    X_train = pca.transform(X_train)\n","    X_test = pca.transform(X_test)\n","  n_estimators= 1500\n","\n","  criterion= 'gini'\n","\n","  max_depth= None\n","\n","  min_samples_split=5\n","\n","  min_samples_leaf=1\n","\n","  min_weight_fraction_leaf = 0 \n","\n","  max_features = 'sqrt'\n","\n","  min_impurity_decrease=0\n","\n","  oob_score=True\n","\n","  warm_start= True\n","\n","  \n","  \n","if (not professional) and features_type == \"_Winrates_\":\n","  # features & labels\n","  X_train = X_train_r_encoded\n","  y_train = y_train_r\n","  X_test = X_test_r_encoded\n","  y_test = y_test_r\n","\n","  # feature size reduction with PCA\n","  if enable_pca:\n","    components_requested = 1\n","    variance_threshold = 0.9\n","    while True:\n","      pca = PCA(n_components=components_requested)\n","      pca.fit(X_train)\n","      if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","        break\n","      else:\n","        components_requested +=1\n","    X_train = pca.transform(X_train)\n","    X_test = pca.transform(X_test)\n","  n_estimators= 1500\n","\n","  criterion= 'gini'\n","\n","  max_depth= None\n","\n","  min_samples_split=4\n","\n","  min_samples_leaf=1\n","\n","  min_weight_fraction_leaf = 0 \n","\n","  max_features = 'sqrt'\n","\n","  min_impurity_decrease=0\n","\n","  oob_score=True\n","\n","  warm_start= True\n","  \n","  \n","if ( professional) and features_type == \"_Vanilla_\":\n","  # features & labels\n","  X_train = X_train_p_encoded\n","  y_train = y_train_p\n","  X_test = X_test_p_encoded\n","  y_test = y_test_p\n","\n","  # feature size reduction with PCA\n","  if enable_pca:\n","    components_requested = 1\n","    variance_threshold = 0.9\n","    while True:\n","      pca = PCA(n_components=components_requested)\n","      pca.fit(X_train)\n","      if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","        break\n","      else:\n","        components_requested +=1\n","    X_train = pca.transform(X_train)\n","    X_test = pca.transform(X_test)\n","  n_estimators= 1000\n","\n","  criterion= 'gini'\n","\n","  max_depth= None\n","\n","  min_samples_split=5\n","\n","  min_samples_leaf=5\n","\n","  min_weight_fraction_leaf = 0 \n","\n","  max_features = 'sqrt'\n","\n","  min_impurity_decrease=0.1\n","\n","  oob_score=True\n","\n","  warm_start= True\n","  \n","  \n","\n","if ( professional) and features_type == \"_Winrates_\":\n","  # features & labels\n","  X_train = X_train_p_encoded\n","  y_train = y_train_p\n","  X_test = X_test_p_encoded\n","  y_test = y_test_p\n","\n","  # feature size reduction with PCA\n","  if enable_pca:\n","    components_requested = 1\n","    variance_threshold = 0.9\n","    while True:\n","      pca = PCA(n_components=components_requested)\n","      pca.fit(X_train)\n","      if np.sum(pca.explained_variance_ratio_) > variance_threshold:\n","        break\n","      else:\n","        components_requested +=1\n","    X_train = pca.transform(X_train)\n","    X_test = pca.transform(X_test)\n","  n_estimators= 1000\n","\n","  criterion= 'gini'\n","\n","  max_depth= None\n","\n","  min_samples_split=5\n","\n","  min_samples_leaf=4\n","\n","  min_weight_fraction_leaf = 0 \n","\n","  max_features = 'sqrt'\n","\n","  min_impurity_decrease=0.1\n","\n","  oob_score=True\n","\n","  warm_start= True\n","  \n","  \n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YzeAAJrAaPRB","colab_type":"text"},"cell_type":"markdown","source":["#Casual Vanilla Random Forest \n","\n"]},{"metadata":{"id":"Nrd0fAVDDd_1","colab_type":"code","outputId":"b4cf61f0-1f21-42d3-93bf-278efcd22a2b","executionInfo":{"status":"ok","timestamp":1556677190370,"user_tz":240,"elapsed":81253,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":66}},"cell_type":"code","source":["random.seed(4) \n","\n","\n","clf=RandomForestClassifier(n_estimators=n_estimators, \n","                       criterion= criterion, \n","                       max_depth= max_depth, \n","                       min_samples_split = min_samples_split, \n","                       min_samples_leaf = min_samples_leaf, \n","                       min_weight_fraction_leaf= min_weight_fraction_leaf, \n","                       max_features = max_features, \n","                       min_impurity_decrease= min_impurity_decrease, \n","                       bootstrap=True, \n","                       oob_score=oob_score, \n","                       random_state=1, \n","                       verbose=0, \n","                       warm_start=False, \n","                       class_weight=None)\n","\n","\n","clf.fit(X_train, np.ravel(y_train))\n","\n","\n","\n","print(clf.oob_score_)\n","\n","\n","predictions = clf.predict(X_test)\n"," \n","print(\"Test Accuracy  :: \", accuracy_score(y_test, predictions))\n"," \n","print(f1_score(y_test, predictions, labels=None, pos_label=1, average='binary', sample_weight=None)) \n","\n","\n","\n"],"execution_count":38,"outputs":[{"output_type":"stream","text":["0.9617373319544984\n","Test Accuracy  ::  0.9568345323741008\n","0.9559633027522936\n"],"name":"stdout"}]},{"metadata":{"id":"oKd7CnZXb9Sc","colab_type":"text"},"cell_type":"markdown","source":["#Casual Winrates \n"]},{"metadata":{"id":"ivQAbL1z0_OX","colab_type":"code","colab":{}},"cell_type":"code","source":["random.seed(4)\n","#number of trees to run \n","n_estimators= 1500\n","\n","criterion= 'gini'\n","  \n","#If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.\n","max_depth= None\n","\n","#The minimum number of samples required to split an internal node:\n","min_samples_split=4\n","\n","\n","min_samples_leaf=1\n","\n","#not sure what this one does\n","min_weight_fraction_leaf = 0 \n","\n","max_features = 'sqrt'\n","\n","#If None then unlimited number of leaf nodes.\n","max_leaf_nodes= None\n","\n","min_impurity_decrease=0\n","\n","#boolean\n","oob_score=True\n","\n","#whether to use previous information to build the tree\n","warm_start= True\n","\n","start=time.time()\n","clf=RandomForestClassifier(n_estimators=n_estimators, \n","                       criterion= criterion, \n","                       max_depth= max_depth, \n","                       min_samples_split = min_samples_split, \n","                       min_samples_leaf = min_samples_leaf, \n","                       min_weight_fraction_leaf= min_weight_fraction_leaf, \n","                       max_features = max_features, \n","                       max_leaf_nodes= max_leaf_nodes, \n","                       min_impurity_decrease= min_impurity_decrease, \n","                       bootstrap=True, \n","                       oob_score=oob_score, \n","                       random_state=1, \n","                       verbose=0, \n","                       warm_start=False, \n","                       class_weight=None)\n","\n","\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"oz048GMLNzIw","colab_type":"code","outputId":"43d62b89-e6fe-4178-8f10-88a7bff21823","executionInfo":{"status":"ok","timestamp":1556677210133,"user_tz":240,"elapsed":100959,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":98}},"cell_type":"code","source":["\n","clf.fit(X_train, np.ravel(y_train))\n","\n","print('train')\n","\n","print(clf.oob_score_)\n","\n","predictions = clf.predict(X_test)\n"," \n","print(\"Test Accuracy  :: \", accuracy_score(y_test, predictions))\n"," \n","\n","conf_mat = confusion_matrix(y_test, predictions)\n","print(conf_mat)\n","\n","\n"],"execution_count":40,"outputs":[{"output_type":"stream","text":["train\n","0.9617373319544984\n","Test Accuracy  ::  0.9568345323741008\n","[[543  22]\n"," [ 26 521]]\n"],"name":"stdout"}]},{"metadata":{"id":"2BvfXaZ12l3V","colab_type":"text"},"cell_type":"markdown","source":["#Professional Vanilla"]},{"metadata":{"id":"vb_3Od2-3gvW","colab_type":"code","outputId":"efa44ffd-4bb6-497a-800b-d1b7f7c4a203","executionInfo":{"status":"ok","timestamp":1556677215602,"user_tz":240,"elapsed":106407,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":98}},"cell_type":"code","source":["#number of trees to run \n","n_estimators= 1000\n","\n","criterion= 'gini'\n","  \n","#If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.\n","max_depth= None\n","\n","#The minimum number of samples required to split an internal node:\n","min_samples_split=5\n","\n","\n","min_samples_leaf=5\n","\n","#not sure what this one does\n","min_weight_fraction_leaf = 0 \n","\n","max_features = 'sqrt'\n","\n","#If None then unlimited number of leaf nodes.\n","max_leaf_nodes= None\n","\n","min_impurity_decrease=0.5\n","\n","#boolean\n","oob_score=True\n","\n","#whether to use previous information to build the tree\n","warm_start= True\n","\n","clf=RandomForestClassifier(n_estimators=n_estimators, \n","                       criterion= criterion, \n","                       max_depth= max_depth, \n","                       min_samples_split = min_samples_split, \n","                       min_samples_leaf = min_samples_leaf, \n","                       min_weight_fraction_leaf= min_weight_fraction_leaf, \n","                       max_features = max_features, \n","                       max_leaf_nodes= max_leaf_nodes, \n","                       min_impurity_decrease= min_impurity_decrease, \n","                       bootstrap=True, \n","                       oob_score=oob_score, \n","                       random_state=1, \n","                       verbose=0, \n","                       warm_start=False, \n","                       class_weight=None)\n","\n","\n","\n","\n","\n","clf.fit(X_train, np.ravel(y_train))\n","\n","\n","\n","predictions = clf.predict(X_test)\n"," \n","print(\"Test Accuracy  :: \", accuracy_score(y_test, predictions))\n"," \n","\n","print(clf.oob_score_)\n","\n","start=time.time()\n","clf.fit(X_train, np.ravel(y_train))\n","\n","end=time.time()\n","\n","\n","\n","print(end-start)\n","\n","predictions = clf.predict(X_test)\n"," \n","print(\"Test Accuracy  :: \", accuracy_score(y_test, predictions))\n","\n","print(\"f1 score\",f1_score(y_test, predictions, labels=None, pos_label=1, average='binary', sample_weight=None))"],"execution_count":41,"outputs":[{"output_type":"stream","text":["Test Accuracy  ::  0.4919064748201439\n","0.5122371596001379\n","2.6106019020080566\n","Test Accuracy  ::  0.4919064748201439\n","f1 score 0.6594333936106088\n"],"name":"stdout"}]},{"metadata":{"id":"311tHZEj3TFZ","colab_type":"text"},"cell_type":"markdown","source":["#Winrates Pro"]},{"metadata":{"id":"KhdDinXT3WLM","colab_type":"code","colab":{}},"cell_type":"code","source":["# number of trees to run \n","n_estimators= 3000\n","\n","criterion= 'gini'\n","  \n","#If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.\n","max_depth= None\n","\n","#The minimum number of samples required to split an internal node:\n","min_samples_split=4\n","\n","\n","min_samples_leaf=5\n","\n","#not sure what this one does\n","min_weight_fraction_leaf = 0 \n","\n","max_features = 'sqrt'\n","\n","#If None then unlimited number of leaf nodes.\n","max_leaf_nodes= None\n","\n","min_impurity_decrease=0.1\n","\n","#boolean\n","oob_score=True\n","\n","#whether to use previous information to build the tree\n","warm_start= True\n","start=time.time()\n","clf=RandomForestClassifier(n_estimators=n_estimators, \n","                           criterion= criterion, \n","                           max_depth= max_depth, \n","                           min_samples_split = min_samples_split, \n","                           min_samples_leaf = min_samples_leaf, \n","                           min_weight_fraction_leaf= min_weight_fraction_leaf, \n","                           max_features = max_features, \n","                           max_leaf_nodes= max_leaf_nodes, \n","                           min_impurity_decrease= min_impurity_decrease, \n","                           bootstrap=True, \n","                           oob_score=oob_score, \n","                           random_state=1, \n","                           verbose=0, \n","                           warm_start=False, \n","                           class_weight=None)\n","\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nuY3CcRjRvRo","colab_type":"code","outputId":"7bbba6d1-3a93-489c-a8bf-4ffceae8352c","executionInfo":{"status":"ok","timestamp":1556677224571,"user_tz":240,"elapsed":115303,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":66}},"cell_type":"code","source":["\n","clf.fit(X_train, np.ravel(y_train))\n","\n","print('train')\n","\n","print(clf.oob_score_)\n","\n","predictions = clf.predict(X_test)\n"," \n","print(\"Test Accuracy  :: \", accuracy_score(y_test, predictions))\n"," \n","\n","\n","\n","\n","\n"],"execution_count":43,"outputs":[{"output_type":"stream","text":["train\n","0.9610479145122371\n","Test Accuracy  ::  0.9568345323741008\n"],"name":"stdout"}]},{"metadata":{"id":"MeDiQmANiwXf","colab_type":"code","outputId":"febeef60-736a-4b4c-e21d-052ee82b506b","executionInfo":{"status":"ok","timestamp":1556677224998,"user_tz":240,"elapsed":115648,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":300}},"cell_type":"code","source":["min_samples=[2,3,4,5,6]\n","accuracy=[0.597, 0.635, 0.684, 0.671, 0.663]\n","\n","\n","plt.plot(min_samples, accuracy)\n","\n","\n","\n","plt.xlabel('Minimum Samples to Split')\n","plt.ylabel('Accuracy')"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Accuracy')"]},"metadata":{"tags":[]},"execution_count":44},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"80dIjJCjbnxq","colab_type":"text"},"cell_type":"markdown","source":["#Plots\n"]},{"metadata":{"id":"Ds0b2mry-Gw4","colab_type":"code","outputId":"62a9e3e2-1cc2-484b-ce94-f4c1271adbd7","executionInfo":{"status":"ok","timestamp":1556677330371,"user_tz":240,"elapsed":220996,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":295}},"cell_type":"code","source":["# learning curve SVM RBF\n","title = r\"Learning Curves Win Rates Professional\"\n","cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n","estimator = clf\n","plot_learning_curve(estimator, title, X_train, y_train, (0.4, 1.01), cv=cv, n_jobs=4)\n","\n","plt.show()"],"execution_count":45,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n3/r163n66ad54403WLJkCd///veB4EjkzDPPZMmSJSxYsIATTjiBuXPnMn36dObNm8crr7zC7373\nO5YuXVpl3fLy8pg0aRLPP/88CxcupE+fPkyePLmuulFE6km27z6qe+GedEr5+cEpo2Rdu0IGblM7\n9thjKSgoiMZnzJjB73//e8rY8D0BAAASk0lEQVTKyli7di0lJSX06NGj0jzNmzfnrLPOAqB///68\n+OKL1bZ9wQUXRHXeffddAF566aVoz79v37707NmzynyHHnooOTk5XHnllZx99tmcc845QHBXxsMP\nPwxAkyZNaNOmDS+99BIXXnghzZs3B+D888/nxRdfZMiQIZXW7eWXX6akpIQvfOELAOzatYtBgwbt\nfYeJSFY1vKSQzsSJla8pALRoEZRnQMuWLaPht956i8mTJ/Paa6/Rrl07vvGNb1T7LeymTZtGw7m5\nuZSVlVXb9iGHHJK2TnXy8vKYP38+zz33HH/+85+56667+Oc//wmwV1/+i6+buzN06FAeeuihWs8v\nIgeexnf6qKgIpk4NjgzMgr9Tp+7zRea9sXnzZlq3bk2bNm1Yt24dzz77bJ0v49RTT+XRRx8FYOnS\npdWentqyZQubN2/mnHPO4fbbb49OMZ1++uncfffdQPBFsc2bNzN48GBmzpzJ9u3bKS0t5cknn2Tw\n4MFV2vzCF77ACy+8wDvvvAME1zbeeuutOl8/EcmsxnekAEECqIckkOykk06iR48efO5zn6Nr166c\neuqpdb6Ma6+9lksvvZQePXpEr7Zt21aqs2nTJi644AJ27txJRUUFt912GwC//e1vufLKK7nnnnto\n0qQJ99xzDwMHDuSSSy5hwIABQHDrbO/evVm5cmWlNjt27Mjvf/97Lr744ug23J/97Gd07969ztdR\nRDLH3D3bMeyVgoICnz9/fqWyZcuWccIJJ2QporpRV9/WLSsro6ysjGbNmvHWW28xZMgQ3nrrLZo0\nOfjzf318o/lgfy/p27rpNdY+MrMF7l6Qrt7Bv6WQSkpLSznjjDMoKyvD3aO9fhGR2tDWooFp164d\nCxYsyHYYInKQanwXmkVEJCUlBRERiSgpiIhIRElBREQijTIpTF86nfw78sn5cQ75d+Qzfen+P476\ngw8+YOTIkRx77LH079+fYcOG8eabb9ZBtHUvPz+fjz/+GCB6LEWyUaNG8dhjj9XYzgMPPMDatWuj\n8SuuuKLaL8uJyMGj0d19NH3pdEb/dTTbdgePuXhv03uM/mvw6Oyi3vv2hTZ3Z8SIEVx22WXRs4MW\nL17M+vXrOe6446J6ZWVlB9ztoYmnq+6LBx54gF69etGpUycA7rvvvroKq04diP0ucqBqcEcKY/8x\nlsIHClO+Ln/y8ighJGzbvY3Ln7w85Txj/1Hzo7Nnz55NXl4eV111VVTWt29fBg8eTHFxMYMHD+a8\n886LHnx32223RY+iTjwKe+vWrZx99tn07duXXr168cgjjwAwbty46BHXyb/RAHD33Xdzww03ROMP\nPPAAY8aMAYKH1/Xv35+ePXsyderUamNv1aoVECS2MWPGcPzxx/PlL385elw3wIQJExgwYAC9evVi\n9OjRuDuPPfYY8+fPp6ioiBNPPJHt27dTWFhI4ouFM2bMoHfv3vTq1St6QF9ieePHj6dv376cfPLJ\nrF+/vkpML7zwQvQjRf369Yt+l/n222+nd+/e9O3bl3HjxgGwaNEiTj75ZPr06cOIESP49NNPASgs\nLGTs2LEUFBQwefJkPvroIy688EIGDBjAgAED+Pe//536HyrSiDW4pJDOzvLqH5Gdqrw2Xn/9dfr3\nT/1LogsXLmTy5Mm8+eabLFiwgD/84Q/MnTuXV199lXvvvZf//Oc/zJo1i06dOrF48WJef/11hg4d\nyoYNG5g5c2b0iOubbrqpStsXXnghM2fOjMYfeeQRRo4cCcD999/PggULmD9/PnfeeScbNmxIGePM\nmTNZsWIFJSUl/PGPf6x0BDFmzBjmzZvH66+/zvbt2/nb3/4W/VbD9OnTWbRoUfQUVYC1a9dy4403\n8q9//YtFixYxb948nnjiCSBIfieffDKLFy/mtNNO4957760Sy69+9SumTJnCokWLePHFF2nevDnP\nPPMMf//735k7dy6LFy/m//2//wfApZdeyq233sqSJUvo3bs3P/7xj6N2du3axfz58/ne977Hd77z\nHa677jrmzZvH448/zhVXXJGyL0QaswZ3TH3H0JofnZ1/Rz7vbar66OyubbtSPKo4IzENHDiQbt26\nAcGjrUeMGBE9YfSCCy7gxRdfZNCgQdx0003ceOONnHPOOQwePDh6XMXll1/OOeecEz3iOu7www/n\nmGOO4dVXX6V79+4sX748eqbSnXfeGSWMVatW8dZbb9GhQ4dqY5wzZw6XXHIJubm5dOrUiS996UvR\n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\nAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"DxABL-s9794X","colab_type":"code","outputId":"205c5f98-fdc9-49e4-c965-c920569ef427","executionInfo":{"status":"ok","timestamp":1556677567488,"user_tz":240,"elapsed":458053,"user":{"displayName":"Sadat Shaik","photoUrl":"","userId":"02158574928113400599"}},"colab":{"base_uri":"https://localhost:8080/","height":300}},"cell_type":"code","source":["# CV curve SVM RBF\n","cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n","estimator = clf\n","\n","param_range =[2,3,4,5,6,7]\n","train_scores, test_scores = validation_curve(estimator, X_train, np.ravel(y_train), param_name=\"min_samples_leaf\", param_range=param_range,\n","    cv=5, scoring=\"balanced_accuracy\", n_jobs=1)\n","\n","train_scores_mean = np.mean(train_scores, axis=1)\n","train_scores_std = np.std(train_scores, axis=1)\n","test_scores_mean = np.mean(test_scores, axis=1)\n","test_scores_std = np.std(test_scores, axis=1)\n","\n","\n","plt.title(\"Validation Curve with RBF SVM (gamma parameter)\")\n","plt.xlabel(r\"$\\gamma$\")\n","plt.ylabel(\"Score\")\n","plt.ylim(0.0, 1.1)\n","lw = 2\n","plt.semilogx(param_range, train_scores_mean, label=\"Training score\",\n","             color=\"darkorange\", lw=lw)\n","plt.fill_between(param_range, train_scores_mean - train_scores_std,\n","                 train_scores_mean + train_scores_std, alpha=0.2,\n","                 color=\"darkorange\", lw=lw)\n","plt.semilogx(param_range, test_scores_mean, label=\"Cross-validation score\",\n","             color=\"navy\", lw=lw)\n","plt.fill_between(param_range, test_scores_mean - test_scores_std,\n","                 test_scores_mean + test_scores_std, alpha=0.2,\n","                 color=\"navy\", lw=lw)\n","plt.legend(loc=\"best\")\n","plt.show()"],"execution_count":46,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAEbCAYAAAA1T5h7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XmYFOW99vHvj81hE0RJXEBBVGRY\nhQFBRAa3w2JA1HOEI6/LUYgGjL4aIscYQ0g0mEXBJSoxrkEUUZSTFzWggLigjIpGEQU5GAZQBmRf\nhIHf+0fVlD1Nz0wzQ816f65rrumqevqpp9a7a+lqc3dEREQAalV0A0REpPJQKIiISEShICIiEYWC\niIhEFAoiIhJRKIiISEShUAwza2VmbmZ1wu6XzeyKdMqWYly3mtkjZWlvdWVmx5vZdjOrXUwZN7OT\nyrNdlZ2ZZZpZjplZRbdFDg0zO8zMlplZ87jGUa1DwcxeMbMJKfoPMbOvD3YH7u4D3P2JQ9CubDPL\nTar7Tne/pqx1FzG+Y8zsr2a2zsy2hSvVr82sYRzjO9Tc/V/u3sjd9wGY2XwzK/W8MrPxZrY3DJrN\nZva2mfVKGJ5tZvvD4dvNbI2Z/TqpDjezHQllNhcxrnpm9iczyw3LrTKzSeGwEtdPM3s8HNeQpDL3\nhP2vLGZSfwP80fVlpEqhrB8cAdz9O+BRYNyha1lh1ToUgCeAESk+Kf0fYKq751dAm8qVmTUD3gHq\nA73cvTFwHtAUaFOK+kq9Qlcyz7p7I+AoYB7wXNLwtWEQNQLOBK42swuTynQuKOPuTYsYz38DWUAP\noDGQDXwQDkt3/fwCuLxgYLgM/gP4sqiJM7NjgH7Ai0WVqeksUGX2gQnb3tPAFWZ2WCwjcvdq+0ew\nI9wCnJXQ7whgN8EGDTAI+BDYCqwGxieUbQU4UCfsng9cE76uDfwR2ACsBEYnlb0K+AzYFg7/cdi/\nIbAL2A9sD/+OBcYDf0sY92DgU2BzON52CcNWAT8DPg6n71kgo4h58Fvgn0CtIoYXmsYU03kl8BZw\nD7AR+F3Ypg4J5ZuH0/SDsPsCYElY7m2gUxHj/jVwX/i6LrAD+EPCstsNNEtsI3AHsC8cth24Pyzv\nwLXA8nC8DwBWxHiT53Vm+P7mYXc2kJv0nunArQndDpyUxjr4d+DGMqyfj4fr2TfAEQnz92XgTeDK\nIuq+HJib1K8rwbq+jSAEnwV+mzDevwN5wKbwdYukdeK34fLcDvwPcCQwlWDbWQy0Spo/PwmXxzaC\no5Y24fu3hvOzXjrjTjFtqwjCdmlY/jHC9T/N6biDYJ3eBZxEEdtq4roA/BxYD6wDLgQGEoT1t0nr\nRS2CT/FfEmwv04Fm4bB/hfOlYLvvFfb/r3D8m4BXgROS5uPocD7+b0L/5UDfWPabcVRamf6AvwCP\nJHT/GFiStNA7hguzE8HGd2E4rBVFh8K1wDKgJcGOa15S2UHhRmBAX2An0DVxRUtq53jCHRVwCsEO\n8jyCneXPgRUJG9Eq4D2CMGkWrlDXFjH9i4BfFzN/Ck1jium8EsgHrifYKdcnOHy9I6H8aOCV8PVp\n4cZzOkFwXhG297AU4z4b+Gf4+oxwQ3o3YdhHJS2HpI3n7wRHQMcT7BT6FzHNifO6HjCRINwL6i+0\nfICTgTXA2UnjSycUbiPYGfyEYD2zpOElrZ+PE+yMpwDXhf2mA8MpPhT+ADyQ0F0P+Aq4IVynLgL2\n8H0oHAlcDDQgOKJ5DngxaZ1YQbBONyHYIX8BnBuuF08CjyXNn5eAw4H2wHfAa8CJCe+/Ip1xp5i2\nVcAnfL/tvXWQ0/GvsE11wnlR0raaD9welh0ZrltPh/W3JwiX1mH5Gwi2uRbAYcDDwLRitrUh4Xxt\nF7bnNuDtpPk4J5zO+gn9ZwE/jWWfGUellemP4NB/M99/kngL+L/FlJ8E3JNqIVJ4Z/k6CTti4Pzk\nBZ5U74vADQkrWnGh8EtgesKwWgQ7peyEjWJEwvDfAw8VMd7lFBEYxayoidN5JfCvpPecC3yZ0P0W\ncHn4+kHgN0nlPyfFpxq+Pxo4kuDT1a0En8oaERxF3FvSckioy4EzE7qnA+OKmObxBDvEzQRHHRsL\n5m3C8tkfDt8a1v0CYSgnjG9rWGZzQVtTjKs2QWi+RbBjXEu4M0xn/eT7UDiT4DRgU4IPLvUpPhT+\nAkxM6D4rXIcsod+bhDvTFO/vAmxKWid+kdD9J+DlhO4fUTjMHOid0P0+cEvS+yelM+4Uw1dReNsb\nmLg+pjEdE4qqu4htdRdQO+xuHE7b6UnTVvBB8jPgnIRhxwB7CXb4rThwW3sZuDppW99JeLQQlj87\nRRunArcXNx2l/asy59NKy93fJPgUeKGZtSE4t/t0wXAzO93M5plZnpltITgCOCqNqo8lON1U4KvE\ngWY2wMwWmdm34UXIgWnWW1B3VJ+77w/HdVxCma8TXu8k2JGmspFgxSyL1Und84AG4bxrRbDhzQyH\nnQDcHF7A3RxOe0uCaSrE3XcBOQSfzs4CFhCcXugd9ltwkO1Md55AELpNgR8SfOrsljR8rbs3dffD\nCXbEuwiuASTqGpZp6u4/TTUSd9/n7g+4e++wnjuAR82sXTi82PUzoZ43CU7T/QL4ezjvirOJYAdW\n4FhgjYd7lFC0XM2sgZk9bGZfmdlW4A2gadIdX98kvN6Vojt5fqdVPs1xJ0ve9o49iLoKrc9pbKsb\nPbzJIWx3qmkrmPYTgJkJ6/5nBB88fljEdJwATE4o/y3BEUvitp68/UGwbFPe3FBW1T4UQk8SnGMd\nAbzq7okL9GmCQ7GW7t4EeIhgoZRkHcHOrsDxBS/CC0DPE5wL/mG485mdUG/ihpnKWoKVpaA+C8e1\nJo12JZsLDC3mgtqO8H+DhH5HJ5Up1N5wAyk4hTGcYCe1LRy8muDUUtOEvwbuPq2I8S8gOFV0GsF5\n6QXAvxHsHN8o4j0lzb+0ufsGYBQwPrw4m6rMFoL15EdlHNcud3+AYIedmTCouPUz0d+Am8PyJfmY\n4DRkgXXAcUkXtRPX35uBtgSfgA8nCGlIb1soq9KMO3nbW3sQdUXrTxrb6sFaDQxIWv8z3H0Nqdfb\n1QTXMBLL13f3t1O1N0E74KNStrFYNSkUziU4H5j8aa8x8K277zazHsB/plnndOCnZtbCzI6g8C1i\n9QjOJ+YB+WY2gOD0UoFvgCPNrEkxdQ8ys3PMrC7Biv4dwafog3U3wXndJ8zsBAAzO87M7jazTu6e\nRxA2I8ystpn9F+ndlfQ0cClwGYU/2f4FuDY8ijAza2hmg8ysccpaghC4HFjq7nsITw0RXFTLK+I9\n3xCcmz4k3P1zggt8P0813MwaAcMILvwfFDO7MbzFtX54i+kVBOvchwnFils/E91LcJ2pqLBMNAfo\namYZYfc7BJ9Yx4TtGEIQvAUaE3zi3RzesfarNMZxqJRm3KPDba8ZwdHTs6Wsq6Rt9WA9BNyRsK01\nT7idOI/gtOSJSeX/28zah+WbmNm/FzcCMzuO4BrDojK0s0g1IhTcfRXBDrUhwVFBop8AE8xsG8HF\npOlpVvsXgh3JRwS3GL6QML5twE/DujYRBM2shOHLgGnAyvCwsdCplXAnNQK4j+DUwo+AH4U7zYPi\n7t8SXMTdC7wbTudrBHe9rAiLjQTGEpxqak8a4ePu7xIcZRxLcF60oH9OWN/94bSvILguUZS3Cc6P\nF+zolhJcZyhuxzcZuMTMNpnZvSW1NU1/AEaZ2Q/C7mMt/A4CwemJZgQBeLB2Epw//5pgWY4GLnb3\nlQUFSlg/SSj3rbu/lnQKqKiy3xBc9xoSdu8huLh8NcFphxEEF+a/C98yiWA5bCDY2bxyMBNZRqUZ\n99PAPwjuFvqS4LrLQddV0rZaCpPD9/8j3NYWEdx0gbvvJLzzKdzue7r7TOAu4JnwdNcnwIASxvGf\nwBMefGfhkLM01i8RqYLMLJPgyKNHqiAxs3cJblB4rNwbVwZmtorgRoO5Fd2W8hae7vqI4Dbm9XGM\no7p8EUlEkrj7UqB7QbeZ9SW4E2wDwVFPJ8r3iEDKKDw6ODXOcSgURGqOtgSnSRoSnHa5xN3XVWyT\npLLR6SMREYnUiAvNIiKSHoWCiIhEqtw1haOOOspbtWpV0c0QEalS3n///Q3uXuLvMFS5UGjVqhU5\nOTkV3QwRkSrFzL4quZROH4mISAKFgoiIRBQKIiISUSiIiEhEoSAiIhGFgoiIRBQKIiISUSiIiEhE\noSAiIhGFgoiIRBQKIiISUSiIiEhEoSAiIhGFgoiIRGILBTN71MzWm9knRQw3M7vXzFaY2cdm1jWu\ntoiISHriPFJ4HOhfzPABwMnh3yjgwRjbIiIiaYgtFNz9DeDbYooMAZ70wCKgqZkdE1d7RESkZBV5\nTeE4YHVCd27YT0REKkiVuNBsZqPMLMfMcvLy8iq6OSIi1VZFhsIaoGVCd4uw3wHcfYq7Z7l7VvPm\nJf7utIiIlFJFhsIs4PLwLqSewBZ3X1eB7RERqfHqxFWxmU0DsoGjzCwX+BVQF8DdHwJmAwOBFcBO\n4Kq42iIiIumJLRTcfXgJwx0YHdf4RUTk4MUWCpXNihXfsmXL7opuhohIqTVpksFJJzWLdRw1JhRO\neunIim6CiEjZ3eyxVl9jQsF+Nr6imyAiUmZ+c7z1V4nvKYiISPmoMUcKy5dfr2sKIlKlNWmSEfs4\nakwoxH1xRkSkOtDpIxERiSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCIKBRER\niSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFE\nRCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERicQaCmbW38w+N7MVZjYuxfDjzWyemX1oZh+b2cA4\n2yMiIsWLLRTMrDbwADAAyASGm1lmUrHbgOnufhowDPhzXO0REZGSxXmk0ANY4e4r3X0P8AwwJKmM\nA4eHr5sAa2Nsj4iIlCDOUDgOWJ3QnRv2SzQeGGFmucBs4PpUFZnZKDPLMbOcvLy8ONoqIiJU/IXm\n4cDj7t4CGAg8ZWYHtMndp7h7lrtnNW/evNwbKSJSU8QZCmuAlgndLcJ+ia4GpgO4+ztABnBUjG0S\nEZFixBkKi4GTzay1mdUjuJA8K6nMv4BzAMysHUEo6PyQiEgFiS0U3D0fGAO8CnxGcJfRp2Y2wcwG\nh8VuBkaa2UfANOBKd/e42iQiIsWrE2fl7j6b4AJyYr/bE14vBXrH2QYREUlfRV9oFhGRSkShICIi\nEYWCiIhEFAoiIhJRKIiISEShICIiEYWCiIhEFAoiIhJRKIiISEShICIiEYWCiIhEFAoiIhJRKIiI\nSEShICIiEYWCiIhEFAoiIhJRKIiISEShICIiEYWCiIhEFAoiIhJRKIiISEShICIiEYWCiIhEFAoi\nIhJRKIiISEShICIiEYWCiIhEFAoiIhJRKIiISEShICIikVhDwcz6m9nnZrbCzMYVUeY/zGypmX1q\nZk/H2R4RESlenbgqNrPawAPAeUAusNjMZrn70oQyJwP/DfR2901m9oO42iMiIiVL+0jBzM40s6vC\n183NrHUJb+kBrHD3le6+B3gGGJJUZiTwgLtvAnD39ek3XUREDrW0QsHMfgXcQvCpHqAu8LcS3nYc\nsDqhOzfsl+gU4BQze8vMFplZ/3TaIyIi8Uj39NFQ4DTgAwB3X2tmjQ/R+E8GsoEWwBtm1tHdNycW\nMrNRwCiA448//hCMVkREUkn39NEed3fAAcysYRrvWQO0TOhuEfZLlAvMcve97v6/wBcEIVGIu09x\n9yx3z2revHmaTRYRkYOVbihMN7OHgaZmNhKYC/ylhPcsBk42s9ZmVg8YBsxKKvMiwVECZnYUwemk\nlWm2SUREDrG0Th+5+x/N7DxgK9AWuN3d55TwnnwzGwO8CtQGHnX3T81sApDj7rPCYeeb2VJgHzDW\n3TeWYXpERKQMLDgrVEyB4NbSue7er3yaVLysrCzPycmp6GaIiFQpZva+u2eVVK7E00fuvg/Yb2ZN\nDknLRESk0kr37qPtwD/NbA6wo6Cnu/80llaJiEiFSDcUXgj/RESkGkv3QvMT4R1Ep4S9Pnf3vfE1\nS0REKkJaoWBm2cATwCrAgJZmdoW7vxFf00REpLyle/roT8D57v45gJmdAkwDusXVMBERKX/pfnmt\nbkEgALj7FwTPPxIRkWok3SOFHDN7hO8fgncZoC8LiIhUM+mGwnXAaKDgFtSFwJ9jaZGIiFSYdEOh\nDjDZ3e+G6FvOh8XWKhERqRDpXlN4Daif0F2f4KF4IiJSjaQbChnuvr2gI3zdIJ4miYhIRUk3FHaY\nWdeCDjPLAnbF0yQREako6V5TuBF4zszWht3HAJfG0yQREakoxR4pmFl3Mzva3RcDpwLPAnuBV4D/\nLYf2iYhIOSrp9NHDwJ7wdS/gVuABYBMwJcZ2iYhIBSjp9FFtd/82fH0pMMXdnweeN7Ml8TZNRETK\nW0lHCrXNrCA4zgFeTxiW7vUIERGpIkrasU8DFpjZBoK7jRYCmNlJwJaY2yYiIuWs2FBw9zvM7DWC\nu43+4d//oHMt4Pq4GyciIuWrxFNA7r4oRb8v4mmOiIhUpHS/vCYiIjWAQkFERCIKBRERiSgUREQk\nolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCKxhoKZ9Tezz81shZmNK6bcxWbm4c98iohI\nBYktFMysNsEP8gwAMoHhZpaZolxj4Abg3bjaIiIi6YnzSKEHsMLdV7r7HuAZYEiKcr8B7gJ2x9gW\nERFJQ5yhcBywOqE7N+wXMbOuQEt3/38xtkNERNJUYReazawWcDdwcxplR5lZjpnl5OXlxd84EZEa\nKs5QWAO0TOhuEfYr0BjoAMw3s1VAT2BWqovN7j7F3bPcPat58+YxNllEpGaLMxQWAyebWWszqwcM\nA2YVDHT3Le5+lLu3cvdWwCJgsLvnxNgmEREpRmyh4O75wBjgVeAzYLq7f2pmE8xscFzjFRGR0ivx\n5zjLwt1nA7OT+t1eRNnsONsiIiIl0zeaRUQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFE\nRCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQ\nEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERiSgUREQkolAQEZGIQkFERCIKBRERiSgU\nREQkolAQEZFIrKFgZv3N7HMzW2Fm41IMv8nMlprZx2b2mpmdEGd7RESkeLGFgpnVBh4ABgCZwHAz\ny0wq9iGQ5e6dgBnA7+Nqj4iIlCzOI4UewAp3X+nue4BngCGJBdx9nrvvDDsXAS1ibI+IiJQgzlA4\nDlid0J0b9ivK1cDLMbZHRERKUKeiGwBgZiOALKBvEcNHAaMAjj/++HJsmYhIzRLnkcIaoGVCd4uw\nXyFmdi7wC2Cwu3+XqiJ3n+LuWe6e1bx581gaKyIi8R4pLAZONrPWBGEwDPjPxAJmdhrwMNDf3deX\ndkR79+4lNzeX3bt3l6W9UsNlZGTQokUL6tatW9FNEakwsYWCu+eb2RjgVaA28Ki7f2pmE4Acd58F\n/AFoBDxnZgD/cvfBBzuu3NxcGjduTKtWrQjrETko7s7GjRvJzc2ldevWFd0ckQoT6zUFd58NzE7q\nd3vC63MPxXh2796tQJAyMTOOPPJI8vLyKropIhWq2nyjWYEgZaV1SKQahUJF2rhxI126dKFLly4c\nffTRHHfccVH3nj170qrjqquu4vPPPy+2zAMPPMDUqVMPRZNFRFKqFLekVnVHHnkkS5YsAWD8+PE0\natSIn/3sZ4XKuDvuTq1aqXP4scceK3E8o0ePLntjY1DStIlI1aGtOEYrVqwgMzOTyy67jPbt27Nu\n3TpGjRpFVlYW7du3Z8KECVHZM888kyVLlpCfn0/Tpk0ZN24cnTt3plevXqxfH9yYddtttzFp0qSo\n/Lhx4+jRowdt27bl7bffBmDHjh1cfPHFZGZmcskll5CVlRUFVqKxY8eSmZlJp06duOWWWwD4+uuv\nGTJkCJ06daJz5868++67APz+97+nQ4cOdOjQgfvuu6/IaXv55Zfp1asXXbt25dJLL2XHjh3xzVwR\niUX1O1L4U0znhW/2Ur1t2bJlPPnkk2RlZQEwceJEmjVrRn5+Pv369eOSSy4hM7PwI6G2bNlC3759\nmThxIjfddBOPPvoo48Yd8DxB3J333nuPWbNmMWHCBF555RXuu+8+jj76aJ5//nk++ugjunbtesD7\nvvnmG2bPns2nn36KmbF582YgOBI577zzGDNmDPn5+ezcuZN3332XqVOnsnjxYvLz8+nRowfZ2dnU\nr1+/0LStX7+eiRMn8tprr9GgQQPuuOMOJk+ezK233lqq+SYiFUNHCjFr06ZNFAgA06ZNo2vXrnTt\n2pXPPvuMpUuXHvCe+vXrM2DAAAC6devGqlWrUtZ90UUXHVDmzTffZNiwYQB07tyZ9u3bH/C+Zs2a\nUatWLUaOHMnMmTNp2LAhAPPnz+fHP/4xAHXq1OHwww/nzTff5OKLL6Z+/fo0btyYCy+8kIULFx4w\nbW+//TZLly7ljDPOoEuXLkydOrXIdotI5VX9jhRK+Yk+LgU7XIDly5czefJk3nvvPZo2bcqIESNS\nfuGuXr160evatWuTn5+fsu7DDjusxDKp1K1bl5ycHObMmcNzzz3Hgw8+yD/+8Q/g4O7ASZw2d6d/\n//489dRTab9fRCofHSmUo61bt9K4cWMOP/xw1q1bx6uvvnrIx9G7d2+mT58OwD//+c+URyLbtm1j\n69atXHDBBdxzzz18+OGHAPTr14+HHnoIgH379rF161b69OnDzJkz2bVrF9u3b+ell16iT58+B9R5\nxhlnsGDBAlauXAkE1zaWL19+yKdPROJV/Y4UKrGuXbuSmZnJqaeeygknnEDv3r0P+Tiuv/56Lr/8\ncjIzM6O/Jk2aFCqzZcsWLrroIr777jv279/P3XffDcD999/PyJEjefjhh6lTpw4PP/wwPXr0YPjw\n4XTv3h2A6667jo4dO7JixYpCdf7whz/kr3/9K5deeml0G+6dd97JySeffMinUUTiY+6V63RLSbKy\nsjwnJ6dQv88++4x27dpVUIsql/z8fPLz88nIyGD58uWcf/75LF++nDp1lP/p0Lok1ZWZve/uWSWV\n056imtm+fTvnnHMO+fn5uHv0qV9EJB3aW1QzTZs25f3336/oZohIFaULzSIiElEoiIhIRKEgIiIR\nhYKIiEQUCofI119/zbBhw2jTpg3dunVj4MCBfPHFFxXdrJRatWrFhg0bgOBLZ6lceeWVzJgxo9h6\nHn/8cdauXRt1X3PNNSm/LCciVYdC4RBwd4YOHUp2djZffvkl77//Pr/73e/45ptvCpU7mEdRlJeC\np6uWRnIoPPLIIwc83K8yqIzzXaSyUigcAvPmzaNu3bpce+21Ub/OnTvTp08f5s+fT58+fRg8eHC0\nw7z77rujR1EXPAp7x44dDBo0iM6dO9OhQweeffZZAMaNGxc94jr5NxoAHnroIcaOHRt1P/7444wZ\nMwaACy+8kG7dutG+fXumTJmSsu2NGjUCgmAbM2YMbdu25dxzz40e1w0wYcIEunfvTocOHRg1ahTu\nzowZM8jJyeGyyy6jS5cu7Nq1i+zsbAq+WDht2jQ6duxIhw4dokdzF4zvF7/4BZ07d6Znz54HBCfA\nggULoh8pOu2009i2bRsAd911Fx07dqRz587RU2OXLFlCz5496dSpE0OHDmXTpk0AZGdnc+ONN5KV\nlcXkyZPJy8vj4osvpnv37nTv3p233nqr6AUqUpMV/EBKVfnr1q2bJ1u6dGn0GsbH8lecyZMn+403\n3phy2Lx587xBgwa+cuVKd3fPycnxDh06+Pbt233btm2emZnpH3zwgc+YMcOvueaa6H2bN2/2DRs2\n+CmnnOL79+93d/dNmzYdUP/69eu9TZs2UXf//v194cKF7u6+ceNGd3ffuXOnt2/f3jds2ODu7iec\ncILn5eW5u3vDhg3d3f3555/3c8891/Pz833NmjXepEkTf+655wrV4+4+YsQInzVrlru79+3b1xcv\nXhwNK+hes2aNt2zZ0tevX+979+71fv36+cyZM8PlQ/T+sWPH+m9+85sDpumCCy7wN998093dt23b\n5nv37vXZs2d7r169fMeOHYXa1LFjR58/f767u//yl7/0G264IWrLddddF9U5fPjwaL589dVXfuqp\npx4wXvfC65JIdQLkeBr7WB0plIMePXrQunVrIHi09dChQ2nYsCGNGjXioosuYuHChXTs2JE5c+Zw\nyy23sHDhQpo0aUKTJk3IyMjg6quv5oUXXqBBgwYH1N28eXNOPPFEFi1axMaNG1m2bFn0TKV77703\n+kS+evXqYh9Q98YbbzB8+HBq167Nsccey9lnnx0NmzdvHqeffjodO3bk9ddf59NPPy12ehcvXkx2\ndjbNmzenTp06XHbZZbzxxhtA8ATYCy64ACj6seC9e/fmpptu4t5772Xz5s3UqVOHuXPnctVVV0Xz\noFmzZmzZsoXNmzfTt29fAK644opoPACXXnpp9Hru3LmMGTOGLl26MHjwYLZu3cr27duLnQ6Rmqja\nfaPZ/VflPs727dsXe1E28RHTRTnllFP44IMPmD17NrfddhvnnHMOt99+O++99x6vvfYaM2bM4P77\n72fOnDl069YNgMGDBzNhwgSGDRvG9OnTOfXUUxk6dChmxvz585k7dy7vvPMODRo0IDs7O+Vjukuy\ne/dufvKTn5CTk0PLli0ZP358qeopULdu3ejx3EU98nvcuHEMGjSI2bNn07t371I/TTZxvu/fv59F\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}