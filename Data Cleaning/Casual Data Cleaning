{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Casual Data Cleaning","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"IB9exgsbwfar","colab_type":"text"},"cell_type":"markdown","source":["# Readme\n","\n","** Setting up:**\n","*   Download the Casual dataset and change the \"casual_base_url\" variable to the path of the casual dataset. \n","*   To generate the training set, change \"is_train\" to True, and vice versa to generate the test set.\n","*   If the files are hosted on your google drive, be sure to run the first code cell and enter your authorization token.\n","\n","**How to Run:**\n","*   To run, simply set up as specified above and then run all code cells consecutively.\n","\n","**Error Handling:**\n","*    In the case of an error, reset the runtime and run the code cells consecutively again.\n"]},{"metadata":{"id":"Y-ZtYBHk6D74","colab_type":"text"},"cell_type":"markdown","source":["# Importing"]},{"metadata":{"id":"NVAl6zqYki1Y","colab_type":"code","colab":{}},"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pdb\n","\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3wSXf1CbxvbN","colab_type":"text"},"cell_type":"markdown","source":["# Program Parameters\n"]},{"metadata":{"id":"LFvDm9B6xyD3","colab_type":"code","colab":{}},"cell_type":"code","source":["is_train = True\n","casual_base_url = \"/content/gdrive/Team Drives/CIS 520/casual/\""],"execution_count":0,"outputs":[]},{"metadata":{"id":"IYLkeMZNyUAI","colab_type":"text"},"cell_type":"markdown","source":["# Data Loading"]},{"metadata":{"id":"kI7AFIe9zQ4_","colab_type":"code","colab":{}},"cell_type":"code","source":["stats1 = pd.read_csv(casual_base_url + 'stats1.csv')\n","matchesCasual1 = pd.read_csv(casual_base_url + 'matches.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xkFIHq9-aodx","colab_type":"code","colab":{}},"cell_type":"code","source":["test_split = int(.2 * len(matchesCasual1))\n","train_split = len(matchesCasual1)\n","test_data = matchesCasual1.loc[0:test_split]\n","train_data = matchesCasual1.loc[(test_split + 1):train_split]\n","\n","train_indices = train_data.index\n","test_indices = test_data.index\n","\n","random_train_indices = np.random.choice(train_indices, 3635, replace=False) # random subset of ranked data \n","random_test_indices =  np.random.choice(test_indices, 1362, replace=False) # random subset of ranked data "],"execution_count":0,"outputs":[]},{"metadata":{"id":"fq7hpTZQxM-U","colab_type":"code","colab":{}},"cell_type":"code","source":["stats1 = pd.read_csv(casual_base_url + 'stats1.csv')\n","stats2 = pd.read_csv(casual_base_url + 'stats2.csv')\n","\n","stats=stats1.append(stats2) \n","participants = pd.read_csv(casual_base_url + 'participants.csv')\n","teambans = pd.read_csv(casual_base_url + 'teambans.csv')\n","teamstats = pd.read_csv(casual_base_url + 'teamstats.csv')\n","\n","stats_participants = stats.merge(participants, left_on=\"id\", right_on=\"id\")\n","stats_participants.drop('id', axis=1, inplace=True)\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dQRSvXfOtpub","colab_type":"code","colab":{}},"cell_type":"code","source":["random_indices = None\n","train_string = \"\"\n","if is_train:\n","  random_indices = random_train_indices\n","  train_string = \"Train\"\n","else:\n","  random_indices = random_test_indices\n","  train_string = \"Test\"\n","  "],"execution_count":0,"outputs":[]},{"metadata":{"id":"k6kKM__l0CD_","colab_type":"text"},"cell_type":"markdown","source":["# Dataset Creation"]},{"metadata":{"id":"01du7MeoI_M1","colab_type":"code","colab":{}},"cell_type":"code","source":["import pdb\n","import logging\n","from sklearn import preprocessing\n","\n","def getByPositionAndRole(match_table, position, role, is_blue):\n","  \n","  team_bool = None\n","  \n","  if is_blue:\n","    team_bool = match_table['player'] <= 5\n","  else:\n","    team_bool = match_table['player'] > 5\n","    \n","  location = None\n","  \n","  if (position != None):\n","    query = np.where(((match_table['position'] == position)&team_bool) == True)\n","  else:\n","    query = np.where(((match_table['role'] == role)&team_bool) == True)\n","    \n","  location = query[0][0]\n","\n","  starting_idx = match_table.index.values[0]\n","  return match_table.loc[location + starting_idx, 'championid']\n","\n","num_incorrect = 0\n","num_correct = 0\n","\n","winrate_matrix = np.zeros((520, 520))\n","freq_matrix = np.zeros((520, 520))\n","\n","champ_matrix = np.zeros((520,))\n","champ_freq_matrix = np.zeros((520,))\n","\n","df = pd.DataFrame()\n","\n","for i in random_train_indices:\n","  try:\n","    match = stats_participants.loc[stats_participants['matchid'] == matchesCasual1.iloc[i]['id']]\n","    jungle_blue = getByPositionAndRole(match, \"JUNGLE\", None, True)\n","    jungle_red = getByPositionAndRole(match, \"JUNGLE\", None, False)\n","    support_blue = getByPositionAndRole(match, None, \"DUO_SUPPORT\", True)\n","    support_red = getByPositionAndRole(match, None, \"DUO_SUPPORT\", False)\n","    adc_blue = getByPositionAndRole(match, None, \"DUO_CARRY\", True)\n","    adc_red = getByPositionAndRole(match, None, \"DUO_CARRY\", False)\n","    top_blue = getByPositionAndRole(match, \"TOP\", None, True)\n","    top_red = getByPositionAndRole(match, \"TOP\", None, False)\n","    mid_blue = getByPositionAndRole(match, \"MID\", None, True)\n","    mid_red = getByPositionAndRole(match, \"MID\",None, False)\n","    \n","    blue_win = match[\"win\"][match.index.values[0]]\n","\n","    blue_vars = [jungle_blue, support_blue, adc_blue, top_blue, mid_blue]\n","    red_vars = [jungle_red, support_red, adc_red, top_red, mid_red]\n","\n","    for j in range(0, len(blue_vars)):\n","      winrate_matrix[blue_vars[j], red_vars[j]] += blue_win\n","      winrate_matrix[red_vars[j], blue_vars[j]] += (1 - blue_win)\n","      freq_matrix[blue_vars[j], red_vars[j]] += 1\n","      freq_matrix[red_vars[j], blue_vars[j]] += 1\n","\n","      champ_matrix[blue_vars[j]] += blue_win\n","      champ_matrix[red_vars[j]] += (1 - blue_win)\n","      champ_freq_matrix[blue_vars[j]] += 1\n","      champ_freq_matrix[red_vars[j]] += 1\n","  except:\n","    continue\n","\n","\n","    \n","    \n","for i in random_indices:\n","  try:\n","    match = stats_participants.loc[stats_participants['matchid'] == matchesCasual1.iloc[i]['id']]\n","    jungle_blue = getByPositionAndRole(match, \"JUNGLE\", None, True)\n","    jungle_red = getByPositionAndRole(match, \"JUNGLE\", None, False)\n","    support_blue = getByPositionAndRole(match, None, \"DUO_SUPPORT\", True)\n","    support_red = getByPositionAndRole(match, None, \"DUO_SUPPORT\", False)\n","    adc_blue = getByPositionAndRole(match, None, \"DUO_CARRY\", True)\n","    adc_red = getByPositionAndRole(match, None, \"DUO_CARRY\", False)\n","    top_blue = getByPositionAndRole(match, \"TOP\", None, True)\n","    top_red = getByPositionAndRole(match, \"TOP\", None, False)\n","    mid_blue = getByPositionAndRole(match, \"MID\", None, True)\n","    mid_red = getByPositionAndRole(match, \"MID\",None, False)\n","\n","    blue_win = match[\"win\"][match.index.values[0]]\n","    \n","    creation_time = matchesCasual1.loc[i]['creation']\n","\n","    feature_vector = [top_blue, top_red, jungle_blue, jungle_red, mid_blue, mid_red, adc_blue, adc_red, support_blue, support_red, blue_win, creation_time]\n","    champ_features = pd.Series(feature_vector).append(pd.Series(match[\"champlvl\"]))\n","    champ_features = champ_features.reset_index()\n","    del champ_features[\"index\"] \n","    df = df.append(champ_features.T, ignore_index=True).astype('int64')\n","\n","    num_correct = num_correct + 1\n","  except Exception as ex:\n","    num_incorrect = num_incorrect + 1  \n","  \n","  \n","freq_matrix[freq_matrix == 0] = 1\n","winrate_matrix = winrate_matrix.astype(np.float) / (freq_matrix)\n","winrate_matrix[winrate_matrix == 0] = 0.5\n","\n","champ_freq_matrix[champ_freq_matrix == 0] = 1\n","champ_matrix = champ_matrix.astype(np.float) / (champ_freq_matrix)\n","champ_matrix[champ_matrix == 0] = 0.5\n","\n","casual=pd.DataFrame(df.values, columns = [\"blue_top\", \"red_top\", \"blue_jungle\", \"red_jungle\", \"blue_middle\", \"red_middle\", \"blue_adc\", \"red_adc\", \"blue_support\", \"red_support\", \"blue_win\", \"creation_time\", \"blue_skill_1\", \"blue_skill_2\", \"blue_skill_3\", \"blue_skill_4\", \"blue_skill_5\", \"red_skill_1\", \"red_skill_2\", \"red_skill_3\", \"red_skill_4\", \"red_skill_5\"])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"T9fZ1mBbqciS","colab_type":"code","colab":{}},"cell_type":"code","source":["casual['top_winrate']=winrate_matrix[casual['blue_top'], casual['red_top']]\n","casual['mid_winrate']=winrate_matrix[casual['blue_middle'], casual['red_middle']]\n","casual['jungle_winrate']=winrate_matrix[casual['blue_jungle'], casual['red_jungle']]\n","casual['adc_winrate']=winrate_matrix[casual['blue_adc'], casual['red_adc']]\n","casual['support_winrate']=winrate_matrix[casual['blue_support'], casual['red_support']]\n","\n","casual['top_pair']=casual[['blue_top','red_top']].min(axis=1).astype(str)+':'+casual[['blue_top','red_top']].max(axis=1).astype(str)\n","casual['mid_pair']=casual[['blue_middle','red_middle']].min(axis=1).astype(str)+':'+casual[['blue_middle','red_middle']].max(axis=1).astype(str)\n","casual['jungle_pair']=casual[['blue_jungle','red_jungle']].min(axis=1).astype(str)+':'+casual[['blue_jungle','red_jungle']].max(axis=1).astype(str)\n","casual['adc_pair']=casual[['blue_adc','red_adc']].min(axis=1).astype(str)+':'+casual[['blue_adc','red_adc']].max(axis=1).astype(str)\n","casual['support_pair']=casual[['blue_support','red_support']].min(axis=1).astype(str)+':'+casual[['blue_support','red_support']].max(axis=1).astype(str)\n","casual['adc_support_pair']=casual[['blue_adc','red_adc']].min(axis=1).astype(str)+':'+casual[['blue_adc','red_adc']].max(axis=1).astype(str)+':'+casual[['blue_support','red_support']].min(axis=1).astype(str)+':'+casual[['blue_support','red_support']].max(axis=1).astype(str)\n","\n","casual['top_blue_winrate']=champ_matrix[casual['blue_top']]\n","casual['mid_blue_winrate']=champ_matrix[casual['blue_middle']]\n","casual['jungle_blue_winrate']=champ_matrix[casual['blue_jungle']]\n","casual['adc_blue_winrate']=champ_matrix[casual['blue_adc']]\n","casual['support_blue_winrate']=champ_matrix[casual['blue_support']]\n","\n","casual['top_red_winrate']=champ_matrix[casual['red_top']]\n","casual['mid_red_winrate']=champ_matrix[casual['red_middle']]\n","casual['jungle_red_winrate']=champ_matrix[casual['red_jungle']]\n","casual['adc_red_winrate']=champ_matrix[casual['red_adc']]\n","casual['support_red_winrate']=champ_matrix[casual['red_support']]\n","\n","wins = casual[['blue_win']]\n","casual_features = casual.drop(columns=['blue_win'], inplace=False)\n","\n","vanilla = np.array([\"blue_top\", \"red_top\", \"blue_jungle\", \"red_jungle\", \"blue_middle\", \"red_middle\", \"blue_adc\", \"red_adc\", \"blue_support\", \"red_support\", \"blue_skill_1\", \"blue_skill_2\", \"blue_skill_3\", \"blue_skill_4\", \"blue_skill_5\", \"red_skill_1\", \"red_skill_2\", \"red_skill_3\", \"red_skill_4\", \"red_skill_5\"])\n","matchups = np.concatenate((vanilla, np.array([\"top_pair\", \"mid_pair\", \"jungle_pair\", \"adc_pair\", \"support_pair\", \"adc_support_pair\"])))\n","winrates = np.concatenate((vanilla, np.array([\"top_winrate\", \"mid_winrate\", \"jungle_winrate\", \"adc_winrate\", \"support_winrate\", \"top_blue_winrate\", \"mid_blue_winrate\", \"jungle_blue_winrate\", \"adc_blue_winrate\", \"support_blue_winrate\", \"top_red_winrate\", \"mid_red_winrate\", \"jungle_red_winrate\", \"adc_red_winrate\", \"support_red_winrate\"])))\n","\n","vanilla_df = casual[vanilla]\n","matchups_df = casual[matchups]\n","winrates_df = casual[winrates]\n","\n","features_filename = \"Casual_Features_Vanilla_\" + train_string + \".csv\"\n","vanilla_df.to_csv(features_filename, index=False)  \n","\n","features_filename = \"Casual_Features_Matchups_\" + train_string + \".csv\"\n","matchups_df.to_csv(features_filename, index=False)  \n","\n","features_filename = \"Casual_Features_Winrates_\" + train_string + \".csv\"\n","winrates_df.to_csv(features_filename, index=False)  \n","\n","labels_filename = \"Casual_Labels_\" + train_string + \".csv\"\n","wins.to_csv(labels_filename, index=False)  \n"],"execution_count":0,"outputs":[]}]}